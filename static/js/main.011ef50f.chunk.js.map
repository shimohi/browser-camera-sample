{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","height","window","innerHeight","width","innerWidth","dimensions","setDimensions","useEffect","debouncedHandleResize","fn","ms","timer","clearTimeout","setTimeout","_","debounce","addEventListener","removeEventListener","videoConstraints","facingMode","exact","CameraCapture","props","webcamRef","capture","cam","webcam","size","imageSrc","getScreenshot","saveAsImage","createRef","this","current","audio","ref","screenshotQuality","screenshotFormat","onUserMediaError","e","alert","style","position","right","top","onClick","Component","uri","downloadLink","document","createElement","download","href","body","appendChild","click","removeChild","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+RAGe,SAASA,IACpB,MAAoCC,IAAMC,SAAS,CAC/CC,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,aAFlB,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAdAR,IAAMS,WAAU,WACZ,IAAMC,EA+Ed,SAAkBC,EAAcC,GAC5B,IAAIC,EACJ,OAAO,WACHC,aAAaD,GACbA,EAAQE,YAAW,SAAAC,GACfH,EAAQ,KACRF,MACDC,IAtF2BK,EAAU,WACpCT,EAAc,CACVN,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,eAEnB,KAGH,OAFAH,OAAOe,iBAAiB,SAAUR,GAClCP,OAAOe,iBAAiB,oBAAqBR,GACtC,WACHP,OAAOgB,oBAAoB,oBAAqBT,GAChDP,OAAOgB,oBAAoB,SAAUT,OAGtC,cAAC,EAAD,CAAeL,MAAOE,EAAWF,MAAOH,OAAQK,EAAWL,SAGtE,IAAMkB,EAAmB,CACrBf,MAAO,KACPH,OAAQ,KACRmB,WAAY,CAAEC,MAAO,gBAGnBC,E,kDAKF,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAFOC,eACO,IAOxBC,QAAU,WACN,IAAMC,EAAM,EAAKC,OACjB,GAAW,MAAPD,EAAJ,CAGA,IAAME,EAAO,EAAKL,MAAMnB,MAAQ,EAAKmB,MAAMtB,OAASkB,EAAmB,CACnEf,MAAOe,EAAiBlB,OACxBA,OAAQkB,EAAiBf,OAEvByB,EAAWH,EAAII,cAAJ,eAAuBF,IACpCC,GACAE,EAAYF,KAhBhB,EAAKL,UAAYzB,IAAMiC,YAFH,E,wCAIxB,WACI,OAAOC,KAAKT,UAAUU,U,oBAgB1B,WACI,OAAS,gCACD,8BACI,cAAC,IAAD,CACIC,OAAO,EACP/B,MAAO6B,KAAKV,MAAMnB,MAClBH,OAAQgC,KAAKV,MAAMtB,OACnBmC,IAAKH,KAAKT,UACVa,kBAAmB,IACnBC,iBAAiB,aACjBnB,iBAAkBA,EAClBoB,iBAAkB,SAACC,GAAD,OAAOtC,OAAOuC,MAAMD,QAG9C,qBAAKE,MAAO,CACRC,SAAS,WACTC,MAAO,KACPC,IAAK,MAHT,SAKI,wBAAQC,QAASb,KAAKR,QAAtB,6E,GA7CQ1B,IAAMgD,WAwElC,IAAMhB,EAAc,SAACiB,GACjB,IAAMC,EAAoBC,SAASC,cAAc,KACZ,kBAA1BF,EAAaG,UACpBH,EAAaI,KAAOL,EAEpBC,EAAaG,SAAW,gBAGxBF,SAASI,KAAKC,YAAYN,GAG1BA,EAAaO,QAGbN,SAASI,KAAKG,YAAYR,IAE1B/C,OAAOwD,KAAKV,ICzGLW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxE,EAAD,MAEFoD,SAASqB,eAAe,SAM1BZ,M","file":"static/js/main.011ef50f.chunk.js","sourcesContent":["import React, {RefObject} from \"react\";\nimport Webcam from \"react-webcam\";\n\nexport default function App() {\n    const [dimensions, setDimensions] = React.useState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    })\n    React.useEffect(() => {\n        const debouncedHandleResize = debounce( () => {\n            setDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth\n            })\n        }, 100)\n        window.addEventListener('resize', debouncedHandleResize)\n        window.addEventListener('orientationchange', debouncedHandleResize)\n        return () => {\n            window.removeEventListener('orientationchange', debouncedHandleResize)\n            window.removeEventListener('resize', debouncedHandleResize)\n        }\n    })\n    return <CameraCapture width={dimensions.width} height={dimensions.height} />\n}\n\nconst videoConstraints = {\n    width: 1920,\n    height: 1080,\n    facingMode: { exact: \"environment\" }\n};\n\nclass CameraCapture extends React.Component<{\n    width: number,\n    height: number\n}, any> {\n    private readonly webcamRef: RefObject<Webcam>;\n    constructor(props: any) {\n        super(props);\n        this.webcamRef = React.createRef();\n    }\n    get webcam(): Webcam | null {\n        return this.webcamRef.current;\n    }\n    capture = () => {\n        const cam = this.webcam\n        if (cam == null) {\n            return;\n        }\n        const size = this.props.width > this.props.height ? videoConstraints : {\n            width: videoConstraints.height,\n            height: videoConstraints.width\n        }\n        const imageSrc = cam.getScreenshot( {...size});\n        if (imageSrc) {\n            saveAsImage(imageSrc)\n        }\n    };\n    render() {\n        return ( <div>\n                <div>\n                    <Webcam\n                        audio={false}\n                        width={this.props.width}\n                        height={this.props.height}\n                        ref={this.webcamRef}\n                        screenshotQuality={0.85}\n                        screenshotFormat=\"image/jpeg\"\n                        videoConstraints={videoConstraints}\n                        onUserMediaError={(e) => window.alert(e)}\n                    />\n                </div>\n                <div style={{\n                    position:\"absolute\",\n                    right: \"2%\",\n                    top: \"2%\",\n                }}>\n                    <button onClick={this.capture}>スクリーンショット</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * イベントの間引き処理\n * @param fn\n * @param ms\n */\nfunction debounce(fn: Function, ms: number) {\n    let timer: any;\n    return () => {\n        clearTimeout(timer)\n        timer = setTimeout(_ => {\n            timer = null\n            fn()\n        }, ms)\n    };\n}\n\n/**\n * 指定した画像をダウンロード\n * @param uri\n */\nconst saveAsImage = (uri: string) => {\n    const downloadLink: any = document.createElement(\"a\");\n    if (typeof downloadLink.download === \"string\") {\n        downloadLink.href = uri;\n        // ファイル名\n        downloadLink.download = \"component.png\";\n\n        // Firefox では body の中にダウンロードリンクがないといけないので一時的に追加\n        document.body.appendChild(downloadLink);\n\n        // ダウンロードリンクが設定された a タグをクリック\n        downloadLink.click();\n\n        // Firefox 対策で追加したリンクを削除しておく\n        document.body.removeChild(downloadLink);\n    } else {\n        window.open(uri);\n    }\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}